
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃リポジトリをファイルごと取り寄せる┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

cd git\xxx
git clone -b ブランチ名 https://リポジトリのアドレス

◆ファイル名の大文字小文字変更をgitに反映する
git mv -f .\js\pokesleeping.js .\js\pokeSleeping.js
git mv -f pokeCook.js .\js\pokeCook.js


25.1:3ca96f0/910:78a94c2/26:78b9902/736:33ca9ac2/159:33ca98c0/317:4ca9ac0


◆現在の状況を保持し、別のブランチを作ってからそちらに適用する
git stash
git checkout -b c
git stash apply
なんかうまくいってなかった気がするけど・・・？普通にコミットしたような

//ブランチを確認
git branch

 main
  ┗ *ttt
      ┗


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃◆mainブランチに別のブランチを反映させる┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃◆リポジトリにローカルデータを反映させる┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//変更を確認
git status

//変更を追加(フォルダ内全部) まだアップロードされてない
git add .

//コミットを追加 まだアップロードされてない
git commit -m "-m is an option for adding messages"

//***をmainにプッシュ ここでアップロードされる
git push *** main
git push origin HEAD でもいい



┏━━━━━━━━━━━━━━━┓
┃エイリアスの設定 ┃
┗━━━━━━━━━━━━━━━┛
//エディターを開く
git config --global --edit

┏━━━━━━━━━━━━┓
┃ブランチ関連  ┃
┗━━━━━━━━━━━━┛
//ブランチの作成
git branch new-branch-name

//ブランチの切り替え
git checkout new-branch-name

//ブランチの作成&切り替え
git checkout -b new-branch-name

//ブランチの削除
git push origin --delete ttt



┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ブランチの変更を初期化する    ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//1. まだ git add していない場合
git checkout -- .

//2. git add したが git commit していない場合
git reset HEAD .
git checkout -- .

//3. git commit してしまったが git push していない場合
git reset --soft HEAD~1
  or
git reset --hard HEAD~1

//4. git push までしてしまった場合
git reset --hard origin/現在のブランチ名

//補足:
//注意点
//git reset --hard を実行すると、変更は完全に消えるので、慎重に実行してください。
//もし削除した内容を後で戻す可能性があるなら、git stash を使って一時保存するのもアリです：
git stash

//そして、後で git stash pop で戻せます。
//現在の状態に不安がある場合は、git status で確認してから実行すると良いでしょう！

1. git checkout -- . の意味
通常、git checkout は ブランチを切り替えるコマンドですが、
特定のファイルやディレクトリを指定した場合は 
そのファイルを最新のコミット時点の状態に戻す
という動作をします。

-- の意味は、「これ以降はファイルのパスであり、ブランチ名ではない」
と Git に明示するためのものです。


┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃mainブランチにdブランチを適用  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//mainブランチに切り替え
git checkout main

//mainブランチの最新状態を取得
git pull

//dブランチをmainブランチに適用(上書き？)
git merge d

//ローカルのデータをリモート(WEB)にプッシュ
git push origin main



┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃mainブランチ以外を消す(ChatGPT先生！！  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//ローカルのブランチ一覧を確認
git branch

//ローカルのブランチの詳細を確認(ちょいムズそうなのでとりあえず↑だけで)
git branch -vv

//ブランチを削除(ここではd)
git branch -d d

//リモートに存在するブランチ一覧を表示する
git branch -r

//不要なリモートブランチを削除する（ここではd)
git push origin --delete d

//ギットフェッチプルーン（おまじない）
git fetch --prune



┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃エイリアス(自作関数含む)を作る  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//エディター(VSCodeなどが必要？)でコンフィグファイルを開く
git config --global --edit

[alias] （なければ自分で書く）の下に
  edita = "config --global --edit"						//上記のコマンドを"git edita"で実行できる
  pushx = "!f(){ git add . && git commit -m \"$1\" && git push origin HEAD;}; f"	//メッセージ(引数1)を与えたうえでadd, commit, pushできる




┏━━━━━━┓
┃その他 ┃
┗━━━━━━┛
//ログを確認
git log


//リモートの確認
git remote -v



git add .
git push origin new-branch-name



//公開ページの切り替え
GitHubのリポジトリへ行き、Setting→Pages→Branchを変更
